// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TipRecipe.DbContexts;

#nullable disable

namespace TipRecipe.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240527030736_initDatabase")]
    partial class initDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TipRecipe.Entities.DetailIngredientDish", b =>
                {
                    b.Property<string>("DishID")
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("IngredientID")
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DishID", "IngredientID");

                    b.HasIndex("IngredientID");

                    b.ToTable("DetailIngredientDishes");
                });

            modelBuilder.Entity("TipRecipe.Entities.DetailTypeDish", b =>
                {
                    b.Property<string>("DishID")
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("TypeID")
                        .HasColumnType("int");

                    b.HasKey("DishID", "TypeID");

                    b.HasIndex("TypeID");

                    b.ToTable("DetailTypeDishes");
                });

            modelBuilder.Entity("TipRecipe.Entities.Dish", b =>
                {
                    b.Property<string>("DishID")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<float>("AvgRating")
                        .HasColumnType("real");

                    b.Property<string>("DishName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UrlPhoto")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("DishID");

                    b.ToTable("Dishes");
                });

            modelBuilder.Entity("TipRecipe.Entities.Ingredient", b =>
                {
                    b.Property<int>("IngredientID")
                        .HasColumnType("int");

                    b.Property<string>("IngredientName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("IngredientID");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("TipRecipe.Entities.Rating", b =>
                {
                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("DishID")
                        .HasColumnType("nvarchar(60)");

                    b.Property<float>("PreRatingScore")
                        .HasColumnType("real");

                    b.Property<DateTime>("RatedAt")
                        .HasColumnType("datetime2");

                    b.Property<float>("RatingScore")
                        .HasColumnType("real");

                    b.HasKey("UserID", "DishID");

                    b.HasIndex("DishID");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("TipRecipe.Entities.Recipe", b =>
                {
                    b.Property<string>("DishID")
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(MAX)");

                    b.HasKey("DishID");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("TipRecipe.Entities.TypeDish", b =>
                {
                    b.Property<int>("TypeID")
                        .HasColumnType("int");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("TypeID");

                    b.ToTable("TypeDishs");
                });

            modelBuilder.Entity("TipRecipe.Entities.User", b =>
                {
                    b.Property<string>("UserID")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TipRecipe.Entities.UserRole", b =>
                {
                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Role")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("UserID", "Role");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("TipRecipe.Entities.DetailIngredientDish", b =>
                {
                    b.HasOne("TipRecipe.Entities.Dish", "Dish")
                        .WithMany("DetailIngredientDishes")
                        .HasForeignKey("DishID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TipRecipe.Entities.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("TipRecipe.Entities.DetailTypeDish", b =>
                {
                    b.HasOne("TipRecipe.Entities.Dish", "Dish")
                        .WithMany("DetailTypeDishes")
                        .HasForeignKey("DishID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TipRecipe.Entities.TypeDish", "Type")
                        .WithMany()
                        .HasForeignKey("TypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("TipRecipe.Entities.Rating", b =>
                {
                    b.HasOne("TipRecipe.Entities.Dish", "Dish")
                        .WithMany("Ratings")
                        .HasForeignKey("DishID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TipRecipe.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TipRecipe.Entities.Recipe", b =>
                {
                    b.HasOne("TipRecipe.Entities.Dish", "Dish")
                        .WithOne("Recipe")
                        .HasForeignKey("TipRecipe.Entities.Recipe", "DishID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");
                });

            modelBuilder.Entity("TipRecipe.Entities.UserRole", b =>
                {
                    b.HasOne("TipRecipe.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TipRecipe.Entities.Dish", b =>
                {
                    b.Navigation("DetailIngredientDishes");

                    b.Navigation("DetailTypeDishes");

                    b.Navigation("Ratings");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("TipRecipe.Entities.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
